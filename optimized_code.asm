.MODEL SMALL
.STACK 100H
.DATA
CR EQU 0DH
LF EQU 0AH
NEWLINE DB CR, LF, '$'
NUMBER DW ?
FLAG DW ?
GLOBAL11a DW ?
GLOBAL11k DW ?
GLOBAL12a DW ?
GLOBAL12b DW ?
GLOBAL12x DW ?
GLOBAL12i DW ?
GLOBAL13a DW ?
GLOBAL13b DW ?
GLOBAL13i DW ?
.CODE
PRINT_NUMBER PROC  ;PRINT NUMBER STORED IN VARIABLE NUMBER
    MOV AX,NUMBER
    MOV FLAG,0
    CMP AX,0
    JGE AX_G_0
    NEG AX
    INC FLAG
    AX_G_0:
    
    MOV BX,10
    MOV DX,'M'
    PUSH DX
    XOR DX,DX
    NUMBER_LOOP:
        DIV BX
        PUSH DX
        XOR DX,DX
        CMP AX,0
        JNZ NUMBER_LOOP
    
    CMP FLAG,1
    JNE PRINTING_LOOP
    MOV AH,2
    MOV DL,'-'
    INT 21H
    
    PRINTING_LOOP:
        POP DX
        CMP DX,'M'
        JE END_PRINTING_LOOP
        ADD DL,'0'
        MOV AH,2
        INT 21H
        JMP PRINTING_LOOP
    
    END_PRINTING_LOOP:
    
    LEA DX, NEWLINE
    MOV AH, 9
    INT 21H 
    
    RET
PRINT_NUMBER ENDP

;procedure begin
f PROC
POP AX
POP GLOBAL11a
PUSH AX
PUSH 5

POP AX
MOV GLOBAL11k, AX
PUSH AX

POP AX

;start while loop
L1:
MOV AX, GLOBAL11k
PUSH AX

PUSH 0

POP BX
POP AX
CMP AX, BX
JLE L4
JMP L2
L4:
PUSH 0
JMP L3
L2:
PUSH 1
L3:

POP AX
CMP AX, 0
JNE L6
JMP L5
L6:

;loop body begin
PUSH GLOBAL11a
INC GLOBAL11a

POP AX

PUSH GLOBAL11k
DEC GLOBAL11k

POP AX

JMP L1

L5:

;end while loop
PUSH 3

MOV AX, GLOBAL11a
PUSH AX

POP AX
POP DX
MUL DX
PUSH AX

PUSH 7

POP BX
POP AX
SUB AX, BX
PUSH AX

POP AX
POP BX
PUSH AX
PUSH BX
RET

PUSH 9

POP AX
MOV GLOBAL11a, AX
PUSH AX

POP AX

POP AX
POP BX
PUSH AX
PUSH BX
RET

f ENDP
;procedure end
;procedure begin
g PROC
POP AX
POP GLOBAL12b
POP GLOBAL12a
PUSH AX
MOV AX, GLOBAL12a
PUSH AX

CALL f
MOV AX, GLOBAL12a
PUSH AX

POP AX
POP BX
ADD AX, BX
PUSH AX

MOV AX, GLOBAL12b
PUSH AX

POP AX
POP BX
ADD AX, BX
PUSH AX

POP AX
MOV GLOBAL12x, AX
PUSH AX

POP AX

;start for loop
PUSH 0

POP AX
MOV GLOBAL12i, AX
PUSH AX

POP AX

L7:
MOV AX, GLOBAL12i
PUSH AX

PUSH 7

POP BX
POP AX
CMP AX, BX
JGE L10
JMP L8
L10:
PUSH 0
JMP L9
L8:
PUSH 1
L9:

POP AX
CMP AX, 0
JNE L12
JMP L11
L12:

JMP L13

L14:
PUSH GLOBAL12i
INC GLOBAL12i

POP AX

JMP L7

L13:
;loop body begin
MOV AX, GLOBAL12i
PUSH AX

PUSH 3

MOV DX, 0
POP BX
POP AX
IDIV BX
PUSH DX

PUSH 0

POP BX
POP AX
CMP AX, BX
JNE L17
JMP L15
L17:
PUSH 0
JMP L16
L15:
PUSH 1
L16:

;ifbegin
POP AX
CMP AX, 0
JNE L20
JMP L19
L20:

MOV AX, GLOBAL12x
PUSH AX

PUSH 5

POP AX
POP BX
ADD AX, BX
PUSH AX

POP AX
MOV GLOBAL12x, AX
PUSH AX

POP AX

JMP L18

L19:
MOV AX, GLOBAL12x
PUSH AX

PUSH 1

POP BX
POP AX
SUB AX, BX
PUSH AX

POP AX
MOV GLOBAL12x, AX
PUSH AX

POP AX

L18:

;ifend
JMP L14

L11:

;end for loop
MOV AX, GLOBAL12x
PUSH AX

POP AX
POP BX
PUSH AX
PUSH BX
RET

POP AX
POP BX
PUSH AX
PUSH BX
RET

g ENDP
;procedure end
;procedure begin
main PROC
MOV AX, @DATA
MOV DS, AX
PUSH 1

POP AX
MOV GLOBAL13a, AX
PUSH AX

POP AX

PUSH 2

POP AX
MOV GLOBAL13b, AX
PUSH AX

POP AX

MOV AX, GLOBAL13a
PUSH AX

MOV AX, GLOBAL13b
PUSH AX

CALL g
POP AX
MOV GLOBAL13a, AX
PUSH AX

POP AX

MOV AX, GLOBAL13a
PUSH AX

POP NUMBER
CALL PRINT_NUMBER

;start for loop
PUSH 0

POP AX
MOV GLOBAL13i, AX
PUSH AX

POP AX

L21:
MOV AX, GLOBAL13i
PUSH AX

PUSH 4

POP BX
POP AX
CMP AX, BX
JGE L24
JMP L22
L24:
PUSH 0
JMP L23
L22:
PUSH 1
L23:

POP AX
CMP AX, 0
JNE L26
JMP L25
L26:

JMP L27

L28:
PUSH GLOBAL13i
INC GLOBAL13i

POP AX

JMP L21

L27:
;loop body begin
PUSH 3

POP AX
MOV GLOBAL13a, AX
PUSH AX

POP AX

;start while loop
L29:
MOV AX, GLOBAL13a
PUSH AX

PUSH 0

POP BX
POP AX
CMP AX, BX
JLE L32
JMP L30
L32:
PUSH 0
JMP L31
L30:
PUSH 1
L31:

POP AX
CMP AX, 0
JNE L34
JMP L33
L34:

;loop body begin
PUSH GLOBAL13b
INC GLOBAL13b

POP AX

PUSH GLOBAL13a
DEC GLOBAL13a

POP AX

JMP L29

L33:

;end while loop
JMP L28

L25:

;end for loop
MOV AX, GLOBAL13a
PUSH AX

POP NUMBER
CALL PRINT_NUMBER

MOV AX, GLOBAL13b
PUSH AX

POP NUMBER
CALL PRINT_NUMBER

MOV AX, GLOBAL13i
PUSH AX

POP NUMBER
CALL PRINT_NUMBER

MOV AH, 4CH
INT 21H

main ENDP
END MAIN
;procedure end
